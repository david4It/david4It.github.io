<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>单点登录（一）</title>
    <url>/2020/06/01/ckb0khpqp0000twvjceb1c0fy/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在分布式环境中，存在多个子系统，每个子系统独立部署。当用户登录其中一个系统之后，若需要访问另一个系统，使用传统方式session的话，就需要用户登录，一旦子系统数量众多，那么用户则需要在多个系统中进行登录，用户体验相当差。</p>
<a id="more"></a>

<h3 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h3><p>单点登录（Single Sign On），简称为 SSO，是目前比较流行的企业业务整合的解决方案之一。SSO 的定义是在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统。</p>
<h4 id="同域下的单点登录"><a href="#同域下的单点登录" class="headerlink" title="同域下的单点登录"></a>同域下的单点登录</h4><p>一个企业一般情况下只有一个域名，通过二级域名区分不同的系统。比如我们有个域名叫做：a.com，同时有两个业务系统分别为：app1.a.com和app2.a.com。我们要做单点登录（SSO），需要一个登录系统，叫sso.a.com。</p>
<p>我们只要在sso.a.com登录，app1.a.com和app2.a.com就也登录了。通过上面的登陆认证机制，我们可以知道，在sso.a.com中登录了，其实是在sso.a.com的服务端的session中记录了登录状态，同时在浏览器端（Browser）的sso.a.com下写入了Cookie。那么我们怎么才能让app1.a.com和app2.a.com登录呢？这里有两个问题：</p>
<ul>
<li>Cookie是不能跨域的，认证系统中Cookie的domain属性是sso.a.com，在给app1.a.com和app2.a.com发送请求是带不上的。<strong>在设置Cookie的时候，其domain的值只能是当前域名或者顶级域名，不能设置为其他域名</strong></li>
<li>sso、app1和app2是不同的应用，它们的session存在自己的应用内，是不共享的。</li>
</ul>
<p><img src="/images/sso/2.png" alt="avatar"></p>
<p>解决上述两问题的方法：</p>
<ul>
<li>sso登录之后，把Cookie的domain属性设置到顶级域名a.com下，所有子系统都可以访问顶级域名的Cookie了。</li>
<li>将sso、app1、app2这三个系统的session进行共享，可以通过spring-session进行实现</li>
</ul>
<h4 id="不同域下的单点登录"><a href="#不同域下的单点登录" class="headerlink" title="不同域下的单点登录"></a>不同域下的单点登录</h4><p>同域下的单点登录是巧用了Cookie和Session共享来实现的，那么在不同域名的情况下，各个系统之间要实现单点登录，那么就需要采用CAS的方式。</p>
<p>CAS 是 Yale 大学发起的一个开源项目，旨在为 Web 应用系统提供一种可靠的单点登录方法，CAS 在 2004 年 12 月正式成为 JA-SIG 的一个项目。CAS 具有以下特点：</p>
<ul>
<li>开源的企业级单点登录解决方案。</li>
<li>CAS Server 为需要独立部署的 Web 应用。这个CAS框架已经提供</li>
<li>CAS Client 支持非常多的客户端(这里指单点登录系统中的各个 Web 应用)，包括Java, .Net, PHP, Perl, Apache, uPortal, Ruby 等。</li>
</ul>
<p>从结构上看，CAS 包含两个部分： CAS Server 和 CAS Client。CAS Server 需要独立部署，主要负责对用户的认证工作；CAS Client 负责处理对客户端受保护资源的访问请求，需要登录时，重定向到 CAS Server。</p>
<p>流程图：</p>
<p><img src="/images/sso/1.png" alt="avatar"></p>
<p>流程简述：</p>
<ol>
<li>用户访问app系统，app系统是需要登录的，但用户现在没有登录。</li>
<li>跳转到CAS server，即SSO登录系统，<strong>以后图中的CAS Server我们统一叫做SSO系统。</strong> SSO系统也没有登录，弹出用户登录页。</li>
<li>用户填写用户名、密码，SSO系统进行认证后，将登录状态写入SSO的session，浏览器（Browser）中写入SSO域下的Cookie。</li>
<li>SSO系统登录完成后会生成一个ST（Service Ticket），然后跳转到app系统，同时将ST作为参数传递给app系统。</li>
<li>app系统拿到ST后，从后台向SSO发送请求，验证ST是否有效。</li>
<li>验证通过后，app系统将登录状态写入session并设置app域下的Cookie。</li>
</ol>
<p>至此，跨域单点登录就完成了。以后我们再访问app系统时，app就是登录的。接下来，我们再看看访问app2系统时的流程。</p>
<ol>
<li>用户访问app2系统，app2系统没有登录，跳转到SSO。</li>
<li>由于SSO已经登录了，不需要重新登录认证。</li>
<li>SSO生成ST，浏览器跳转到app2系统，并将ST作为参数传递给app2。</li>
<li>app2拿到ST，后台访问SSO，验证ST是否有效。</li>
<li>验证成功后，app2将登录状态写入session，并在app2域下写入Cookie。</li>
</ol>
<p>这样，app2系统不需要走登录流程，就已经是登录了。SSO，app和app2在不同的域，它们之间的session不共享也是没问题的。</p>
]]></content>
      <categories>
        <category>CAS</category>
      </categories>
      <tags>
        <tag>CAS</tag>
      </tags>
  </entry>
  <entry>
    <title>单点登录（三）</title>
    <url>/2020/06/03/ckb0khpr90007twvjc15xboq3/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>CAS Server的基本定制已经完成，接下来就需要对Client进行开发和测试，保证整个业务流程的正确性。这里通过两个client项目进行演示：其中一个项目使用filter方式进行认证；而另一个项目则采用spring security cas的方式进行认证。</p>
<a id="more"></a>

<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ol>
<li>JDK1.8</li>
<li>Intellij Idea</li>
<li>Spring boot 2.3.0 + thymeleaf + spring security</li>
<li><a href="https://github.com/apereo/java-cas-client/releases/tag/cas-client-3.6.0" target="_blank" rel="noopener">cas client 3.6.0</a></li>
<li>maven 3.6.1</li>
</ol>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="SpringBoot-Filter-方式"><a href="#SpringBoot-Filter-方式" class="headerlink" title="SpringBoot + Filter 方式"></a>SpringBoot + Filter 方式</h4><ul>
<li><p>添加cas-client的springboot依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jasig.cas.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cas-client-support-springboot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;java.cas.client.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>yml文件添加如下配置，以便Filters初始化的时候进行使用</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cas:</span></span><br><span class="line">  <span class="attr">server-url-prefix:</span> <span class="string">https://david4it.com:8443/cas</span></span><br><span class="line">  <span class="attr">server-login-url:</span> <span class="string">https://david4it.com:8443/cas/login</span></span><br><span class="line">  <span class="attr">client-host-url:</span> <span class="string">http://picClient.com:8088</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加CAS Filters</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CASAutoConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;cas.server-url-prefix&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String serverUrlPrefix;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;cas.server-login-url&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String serverLoginUrl;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;cas.client-host-url&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String clientHostUrl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录过滤器:执行用户退出时的操作（可选）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">filterSingleRegistration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FilterRegistrationBean registration = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        registration.setFilter(<span class="keyword">new</span> SingleSignOutFilter());</span><br><span class="line">        <span class="comment">// 设定匹配的路径</span></span><br><span class="line">        registration.addUrlPatterns(<span class="string">"/*"</span>);</span><br><span class="line">        <span class="comment">// 设定加载的顺序</span></span><br><span class="line">        registration.setOrder(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> registration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ticket过滤验证器:负责检验ticket（必须）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">filterValidationRegistration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FilterRegistrationBean registration = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        registration.setFilter(<span class="keyword">new</span> Cas30ProxyReceivingTicketValidationFilter());</span><br><span class="line">        <span class="comment">// 设定匹配的路径</span></span><br><span class="line">        registration.addUrlPatterns(<span class="string">"/*"</span>);</span><br><span class="line">        Map&lt;String,String&gt;  initParameters = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        initParameters.put(<span class="string">"casServerUrlPrefix"</span>, serverUrlPrefix);</span><br><span class="line">        initParameters.put(<span class="string">"serverName"</span>, clientHostUrl);</span><br><span class="line">        initParameters.put(<span class="string">"useSession"</span>, <span class="string">"true"</span>);</span><br><span class="line">        registration.setInitParameters(initParameters);</span><br><span class="line">        <span class="comment">// 设定加载的顺序</span></span><br><span class="line">        registration.setOrder(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> registration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 授权过滤器:负责用户认证（必须）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">filterAuthenticationRegistration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FilterRegistrationBean registration = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        registration.setFilter(<span class="keyword">new</span> AuthenticationFilter());</span><br><span class="line">        <span class="comment">// 设定匹配的路径</span></span><br><span class="line">        registration.addUrlPatterns(<span class="string">"/*"</span>);</span><br><span class="line">        Map&lt;String,String&gt; initParameters = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        initParameters.put(<span class="string">"casServerLoginUrl"</span>, serverUrlPrefix);</span><br><span class="line">        initParameters.put(<span class="string">"serverName"</span>, clientHostUrl);</span><br><span class="line">        registration.setInitParameters(initParameters);</span><br><span class="line">        <span class="comment">// 设定加载的顺序</span></span><br><span class="line">        registration.setOrder(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> registration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * wraper过滤器:用户登录名过滤器(可选)，HttpServletRequest的包装类，附加了用户的Principal信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">filterWrapperRegistration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FilterRegistrationBean registration = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        registration.setFilter(<span class="keyword">new</span> HttpServletRequestWrapperFilter());</span><br><span class="line">        <span class="comment">// 设定匹配的路径</span></span><br><span class="line">        registration.addUrlPatterns(<span class="string">"/*"</span>);</span><br><span class="line">        <span class="comment">// 设定加载的顺序</span></span><br><span class="line">        registration.setOrder(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> registration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加监听器：用于监听用户的登出操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean&lt;EventListener&gt; <span class="title">singleSignOutListenerRegistration</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServletListenerRegistrationBean&lt;EventListener&gt; registrationBean = <span class="keyword">new</span> ServletListenerRegistrationBean&lt;EventListener&gt;();</span><br><span class="line">        registrationBean.setListener(<span class="keyword">new</span> SingleSignOutHttpSessionListener());</span><br><span class="line">        registrationBean.setOrder(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改本地hosts，增加本地域名配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1	picclient.com</span><br></pre></td></tr></table></figure>
</li>
<li><p>CAS Server也需要配置，以便识别子系统</p>
<ul>
<li><p>由于子系统使用的是http，而非https。所以需要在application.properties中添加如下配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cas.tgc.secure&#x3D;false</span><br><span class="line">cas.serviceRegistry.initFromJson&#x3D;true</span><br></pre></td></tr></table></figure>
</li>
<li><p>结合上一篇文章，对CAS server的项目进行了拓展，在src\main\resources\servies\目录中，新建json文件，配置客户端的信息</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"@class"</span> : <span class="string">"org.apereo.cas.services.RegexRegisteredService"</span>,</span><br><span class="line">  <span class="attr">"serviceId"</span> : <span class="string">"^(http)://picclient.com.*"</span>,</span><br><span class="line">  <span class="attr">"name"</span> : <span class="string">"picclient"</span>,</span><br><span class="line">  <span class="attr">"id"</span> : <span class="number">10000001</span>,</span><br><span class="line">  <span class="attr">"description"</span> : <span class="string">"CAS Client pic"</span>,</span><br><span class="line">  <span class="attr">"evaluationOrder"</span> : <span class="number">10001</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动CAS server和CAS client之后，在访问client页面的时候，就会被重定向到CAS server进行认证，认证完成之后，再跳转回client页面</p>
</li>
</ul>
</li>
</ul>
<h4 id="Spring-Security方式"><a href="#Spring-Security方式" class="headerlink" title="Spring Security方式"></a>Spring Security方式</h4><ul>
<li><p>添加spring security以及spring security cas的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-cas --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-cas<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>yml文件添加如下配置，以便Filters初始化的时候进行使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cas:</span><br><span class="line">  server-url-prefix: https:&#x2F;&#x2F;david4it.com:8443&#x2F;cas</span><br><span class="line">  server-login-url: https:&#x2F;&#x2F;david4it.com:8443&#x2F;cas&#x2F;login</span><br><span class="line">  server-logout-url: https:&#x2F;&#x2F;david4it.com:8443&#x2F;cas&#x2F;logout</span><br><span class="line">  client-host-url: http:&#x2F;&#x2F;message.client.com:9099&#x2F;login&#x2F;cas</span><br><span class="line">  client-logout-url: http:&#x2F;&#x2F;message.client.com:9099&#x2F;logout</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加CAS 所需的拦截器以及配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CASAutoConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;cas.server-url-prefix&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String serverUrlPrefix;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;cas.server-login-url&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String serverLoginUrl;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;cas.server-logout-url&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String serverLogoutUrl;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;cas.client-host-url&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String clientHostUrl;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;cas.client-logout-url&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String clientLogoutUrl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServiceProperties <span class="title">serviceProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServiceProperties serviceProperties = <span class="keyword">new</span> ServiceProperties();</span><br><span class="line">        <span class="comment">//客户端的url地址，必须和服务器中的配置文件吻合，否则就是未认证授权的服务</span></span><br><span class="line">        serviceProperties.setService(clientHostUrl);</span><br><span class="line">        <span class="keyword">return</span> serviceProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationEntryPoint <span class="title">authenticationEntryPoint</span><span class="params">(ServiceProperties sp)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义登陆页面为CAS服务器</span></span><br><span class="line">        CasAuthenticationEntryPoint entryPoint = <span class="keyword">new</span> CasAuthenticationEntryPoint();</span><br><span class="line">        entryPoint.setLoginUrl(serverLoginUrl);</span><br><span class="line">        entryPoint.setServiceProperties(sp);</span><br><span class="line">        <span class="keyword">return</span> entryPoint;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TicketValidator <span class="title">ticketValidator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义验证ticket的服务器地址</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Cas30ProxyTicketValidator(serverUrlPrefix);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetailsService <span class="title">userDetailsService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义内存用户，用于验证用户信息的正确性</span></span><br><span class="line">        InMemoryUserDetailsManager manager = <span class="keyword">new</span> InMemoryUserDetailsManager();</span><br><span class="line">        manager.createUser(User.withUsername(<span class="string">"admin"</span>).password(<span class="string">"$2a$10$8GhWjgG4j2Ot15inivAAW.bmzAeu.If9J8HEV6j/jbI37.8GLwS2W"</span>).roles(<span class="string">"USER"</span>).build());</span><br><span class="line">        <span class="keyword">return</span> manager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CasAuthenticationProvider <span class="title">authenticationProvider</span><span class="params">(ServiceProperties sp, TicketValidator validator, UserDetailsService userDetailsService)</span> </span>&#123;</span><br><span class="line">        CasAuthenticationProvider provider = <span class="keyword">new</span> CasAuthenticationProvider();</span><br><span class="line">        provider.setTicketValidator(validator);</span><br><span class="line">        provider.setServiceProperties(sp);</span><br><span class="line">        provider.setKey(<span class="string">"david4it"</span>);</span><br><span class="line">        provider.setUserDetailsService(userDetailsService);</span><br><span class="line">        <span class="keyword">return</span> provider;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CasAuthenticationFilter <span class="title">casAuthenticationFilter</span><span class="params">(ServiceProperties sp, AuthenticationProvider provider)</span> </span>&#123;</span><br><span class="line">        CasAuthenticationFilter filter = <span class="keyword">new</span> CasAuthenticationFilter();</span><br><span class="line">        filter.setServiceProperties(sp);</span><br><span class="line">        filter.setAuthenticationManager(<span class="keyword">new</span> ProviderManager(Arrays.asList(provider)));</span><br><span class="line">        <span class="keyword">return</span> filter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SingleSignOutFilter <span class="title">singleSignOutFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SingleSignOutFilter singleSignOutFilter = <span class="keyword">new</span> SingleSignOutFilter();</span><br><span class="line">        singleSignOutFilter.setIgnoreInitConfiguration(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> singleSignOutFilter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LogoutFilter <span class="title">logoutFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LogoutFilter logoutFilter = <span class="keyword">new</span> LogoutFilter(serverLogoutUrl, <span class="keyword">new</span> SecurityContextLogoutHandler());</span><br><span class="line">        logoutFilter.setFilterProcessesUrl(clientLogoutUrl);</span><br><span class="line">        <span class="keyword">return</span> logoutFilter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加spring security相关配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AuthenticationEntryPoint entryPoint;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AuthenticationProvider authenticationProvider;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SingleSignOutFilter singleSignOutFilter;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    LogoutFilter logoutFilter;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    CasAuthenticationFilter authenticationFilter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.authenticationProvider(authenticationProvider);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.csrf().disable()</span><br><span class="line">            .cors().disable()</span><br><span class="line">                .authorizeRequests().antMatchers(<span class="string">"/static/**"</span>, <span class="string">"/login/cas"</span>).permitAll()</span><br><span class="line">                .anyRequest().authenticated().and()</span><br><span class="line">                .exceptionHandling().authenticationEntryPoint(entryPoint).and()</span><br><span class="line">                .addFilter(authenticationFilter)</span><br><span class="line">                .addFilterBefore(singleSignOutFilter, CasAuthenticationFilter<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">addFilterBefore</span>(<span class="title">logoutFilter</span>, <span class="title">LogoutFilter</span>.<span class="title">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改本地hosts，增加本地域名配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1	message.client.com</span><br></pre></td></tr></table></figure>
</li>
<li><p>CAS Server也需要配置，以便识别子系统</p>
<ul>
<li><p>在src\main\resources\servies\目录中，新建json文件，配置客户端的信息</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"@class"</span> : <span class="string">"org.apereo.cas.services.RegexRegisteredService"</span>,</span><br><span class="line">  <span class="attr">"serviceId"</span> : <span class="string">"^(http)://message.client.com.*"</span>,</span><br><span class="line">  <span class="attr">"name"</span> : <span class="string">"messageclient"</span>,</span><br><span class="line">  <span class="attr">"id"</span> : <span class="number">10000002</span>,</span><br><span class="line">  <span class="attr">"description"</span> : <span class="string">"CAS Client message"</span>,</span><br><span class="line">  <span class="attr">"evaluationOrder"</span> : <span class="number">10002</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动CAS server和CAS client之后，在访问client页面的时候，就会被重定向到CAS server进行认证，认证完成之后，再跳转回client页面</p>
</li>
</ul>
</li>
</ul>
<h4 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h4><ol>
<li><p>在使用spring security + spring security cas的时候，遇到了重定向次数过多的问题</p>
<p><img src="/images/sso/5.png" alt="avatar"></p>
</li>
</ol>
<p>根据[官方问题指导]([<a href="https://apereo.github.io/cas/4.2.x/installation/Troubleshooting-Guide.html#:~:text=%E2%80%9CToo%20many%20redirect%E2%80%9D%20errors%20are,you%20will%20find%20the%20cause.]" target="_blank" rel="noopener">https://apereo.github.io/cas/4.2.x/installation/Troubleshooting-Guide.html#:~:text=%E2%80%9CToo%20many%20redirect%E2%80%9D%20errors%20are,you%20will%20find%20the%20cause.]</a>(<a href="https://apereo.github.io/cas/4.2.x/installation/Troubleshooting-Guide.html#:~:text=&quot;Too" target="_blank" rel="noopener">https://apereo.github.io/cas/4.2.x/installation/Troubleshooting-Guide.html#:~:text=&quot;Too</a> many redirect” errors are,you will find the cause.))可以了解到，这一定是配置上出现了问题。期初我的yml配置如下</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cas:</span></span><br><span class="line">  <span class="attr">server-url-prefix:</span> <span class="string">https://david4it.com:8443/cas</span></span><br><span class="line">  <span class="attr">server-login-url:</span> <span class="string">https://david4it.com:8443/cas/login</span></span><br><span class="line">  <span class="attr">server-logout-url:</span> <span class="string">https://david4it.com:8443/cas/logout</span></span><br><span class="line">  <span class="comment">#client-host-url: http://message.client.com:9099/login/cas 正确配置</span></span><br><span class="line">  <span class="attr">client-host-url:</span> <span class="string">http://message.client.com:9099</span></span><br><span class="line">  <span class="attr">client-logout-url:</span> <span class="string">http://message.client.com:9099/logout</span></span><br></pre></td></tr></table></figure>

<p>并且我的security配置也并没有放行<code>/login/cas</code>路径的校验。</p>
<p>后来经过搜索，在<a href="https://stackoverflow.com/questions/32252695/getting-a-loop-redirect-with-spring-security-cas-but-should-be-working" target="_blank" rel="noopener">stackoverflow</a>上发现了和我一样问题的人，看了下解决方式，原来spring security 4.x以后的版本，CasAuthenticationFilter使用的默认路径为/login/cas。只需要添加上这个路径，就可以正常运行了。</p>
<h4 id="源码以及注意事项"><a href="#源码以及注意事项" class="headerlink" title="源码以及注意事项"></a>源码以及注意事项</h4><p>CAS客户端Demo源码：<a href="https://github.com/david4It/cas_clients" target="_blank" rel="noopener">cas_client</a></p>
<p>CAS服务端源码：<a href="https://github.com/david4It/cus_cas_server" target="_blank" rel="noopener">cus_cas_server</a></p>
<p><strong>由于CAS服务端仅定制部分界面以及配置，cus_cas_server项目仅包含src的内容，确保项目结构如下图所示</strong></p>
<p><img src="/images/sso/3.png" alt="avatar"></p>
<p><strong>CAS服务端在打包的时候，在<code>WEB-INF/classes/services/</code>路径中会保留自带的客户端配置json文件，只保留自定义的客户端配置json文件即可</strong></p>
<p><img src="/images/sso/6.png" alt="avatar"></p>
]]></content>
      <categories>
        <category>CAS</category>
      </categories>
      <tags>
        <tag>CAS</tag>
      </tags>
  </entry>
  <entry>
    <title>单点登录（二）</title>
    <url>/2020/06/02/ckb0khpra0008twvjf1fl6bob/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>已经对SSO以及CAS的基本概念和流程有了一定了解之后，就可以开始着手实现自己的CAS认证服务器了。本文主要讲解如何在本地使用HTTPS的方式启动CAS Server，以及定制CAS Server的部分页面。</p>
<a id="more"></a>

<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ol>
<li>WIN10</li>
<li>JDK1.8</li>
<li>Intellij Idea</li>
<li><a href="https://github.com/apereo/cas-overlay-template/tree/5.3" target="_blank" rel="noopener">cas-overlay-template 5.3</a> 这个版本也是支持1.8的最新版本了</li>
<li>maven 3.6.1</li>
<li>apache-tomcat-8.5.55</li>
</ol>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="CAS-Server的编译和启动"><a href="#CAS-Server的编译和启动" class="headerlink" title="CAS Server的编译和启动"></a>CAS Server的编译和启动</h4><ul>
<li><p>cas-overlay-template编译</p>
<p>将下载好的cas-overlay-template解压，然后进入到项目根目录，执行编译</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn clean install</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动cas服务</p>
<p>将cas-overlay-template项目中编译好的war包放入到tomcat启动，启动完成之后，访问<a href="http://localhost:8080/cas/login，使用默认用户名和密码为casuser和Mellon进行登录" target="_blank" rel="noopener">http://localhost:8080/cas/login，使用默认用户名和密码为casuser和Mellon进行登录</a></p>
</li>
<li><p>为了模拟更加真实的环境，修改hosts，win10的hosts地址为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\WINDOWS\system32\drivers\etc</span><br></pre></td></tr></table></figure>
</li>
<li><p>在hosts中增加如下记录，在win10中推荐使用<a href="https://github.com/scottlerch/HostsFileEditor/releases" target="_blank" rel="noopener">Hosts File Editor</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1 david4it.com</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="开启HTTPS服务"><a href="#开启HTTPS服务" class="headerlink" title="开启HTTPS服务"></a>开启HTTPS服务</h4><ul>
<li><p>进入tomcat的根目录中，执行命令生成https证书</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">keytool -genkey -alias tomcat -keyalg RSA -keypass tomcat -storepass tomcat -keystore server.keystore -validity 3600</span><br><span class="line"></span><br><span class="line">C:\Users\SMESC\Desktop\cas-overlay-template-5.3&gt;keytool -genkey -alias tomcat -keyalg RSA -keypass tomcat -storepass tomcat -keystore server.keystore -validity 3600</span><br><span class="line">您的名字与姓氏是什么?</span><br><span class="line">  [Unknown]:  david4it.com</span><br><span class="line">您的组织单位名称是什么?</span><br><span class="line">  [Unknown]:  org</span><br><span class="line">您的组织名称是什么?</span><br><span class="line">  [Unknown]:  org</span><br><span class="line">您所在的城市或区域名称是什么?</span><br><span class="line">  [Unknown]:  cd</span><br><span class="line">您所在的省/市/自治区名称是什么?</span><br><span class="line">  [Unknown]:  sc</span><br><span class="line">该单位的双字母国家/地区代码是什么?</span><br><span class="line">  [Unknown]:  cn</span><br><span class="line">CN=david4it.com, OU=org, O=org, L=cd, ST=sc, C=cn是否正确?</span><br><span class="line">  [否]:  是</span><br><span class="line"></span><br><span class="line">Warning:</span><br><span class="line">JKS 密钥库使用专用格式。建议使用 "keytool -importkeystore -srckeystore server.keystore -destkeystore server.keystore -deststoretype pkcs12" 迁移到行业标准格式 PKCS12。</span><br></pre></td></tr></table></figure>

<p><strong>填写信息的时候要注意，名字与姓氏这一项，一定要和hosts中你自定义的域名相匹配！</strong></p>
<p>keytool  -genkey 参数含义</p>
<ul>
<li>alias: 别名 这里起名tomcat</li>
<li>keyalg: 证书算法，RSA</li>
<li>keystore：证书生成的目标路径和文件名</li>
<li>keypass：密钥保护密码</li>
<li>storepass：存储密码</li>
<li>validity：证书有效天数</li>
</ul>
<p>更多关于证书生成参数，请参看<a href="http://blog.chinaunix.net/uid-17102734-id-2830223.html" target="_blank" rel="noopener">http://blog.chinaunix.net/uid-17102734-id-2830223.html</a></p>
</li>
<li><p>生成server.cer文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">keytool -export -trustcacerts -alias tomcat -file server.cer -keystore server.keystore -storepass tomcat</span><br></pre></td></tr></table></figure>
</li>
<li><p>导入证书</p>
<ul>
<li><p>找到jdk1.8的安装路径，win10可以在环境变量中进行查看。找到文件cacerts</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\Program Files\Java\jdk1.8.0_201\jre\lib\security\cacerts</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用命令将证书导入到jdk中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> keytool -import -trustcacerts -alias tomcat -keystore "D:\Program Files\Java\jdk1.8.0_201\jre\lib\security\cacerts" -file "C:\Users\SMESC\Desktop\apache-tomcat-8.5.55\server.cer" -storepass changeit</span><br><span class="line"> </span><br><span class="line">所有者: CN=david4it.com, OU=cas, O=cas, L=cd, ST=sc, C=cn</span><br><span class="line">发布者: CN=david4it.com, OU=cas, O=cas, L=cd, ST=sc, C=cn</span><br><span class="line">序列号: 3e3f3a5d</span><br><span class="line">有效期为 Tue Jun 02 14:09:47 CST 2020 至 Thu Apr 11 14:09:47 CST 2030</span><br><span class="line">证书指纹:</span><br><span class="line">         MD5:  7E:D7:48:6C:A7:BB:CA:7E:6F:D3:93:80:5B:B1:F7:1A</span><br><span class="line">         SHA1: 86:62:89:8F:08:D9:84:32:6C:3C:90:9B:71:94:7F:27:B6:5C:AF:AD</span><br><span class="line">         SHA256: 3A:47:0B:EF:B3:CD:68:02:76:46:C2:6E:3A:6F:63:1F:84:30:2F:3B:1C:85:D2:46:9A:7A:E7:5F:CE:E1:14:F4</span><br><span class="line">签名算法名称: SHA256withRSA</span><br><span class="line">主体公共密钥算法: 2048 位 RSA 密钥</span><br><span class="line">版本: 3</span><br><span class="line"></span><br><span class="line">扩展:</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">1: ObjectId: 2.5.29.14 Criticality=<span class="literal">false</span></span></span><br><span class="line">SubjectKeyIdentifier [</span><br><span class="line">KeyIdentifier [</span><br><span class="line">0000: 6E 3B 19 D8 B6 85 DA A2   BC 71 3E 96 80 8C 71 CB  n;.......q&gt;...q.</span><br><span class="line">0010: 38 86 04 F9                                        8...</span><br><span class="line">]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">是否信任此证书? [否]:  是</span><br><span class="line">证书已添加到密钥库中</span><br></pre></td></tr></table></figure>

<p><strong>证书库默认密码为changeit，不能填前面自定义的密码</strong></p>
</li>
<li><p>若想删除证书，则执行如下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">keytool -delete -alias tomcat -keystore "D:\Program Files\Java\jdk1.8.0_201\jre\lib\security\cacerts" -storepass changeit</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<pre><code>**JDK的cacerts文件路径以及tomcat的路径要根据实际目录进行调整**</code></pre><ul>
<li><p>tomcat开启https服务</p>
<ul>
<li><p>编辑\conf\server.xml文件，添加如下内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8443"</span> <span class="attr">protocol</span>=<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">maxThreads</span>=<span class="string">"150"</span> <span class="attr">SSLEnabled</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">SSLHostConfig</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Certificate</span> <span class="attr">certificateKeystoreFile</span>=<span class="string">"server.keystore"</span> <span class="attr">certificateKeystorePassword</span>=<span class="string">"tomcat"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">type</span>=<span class="string">"RSA"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">SSLHostConfig</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Connector</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>port: https的端口,默认8443</li>
<li>clientAuth:设置是否双向验证，默认为false，设置为true代表双向验证keystoreFile</li>
<li>keystoreFile: keystore证书的路径</li>
<li>keystorePass: 生成keystore时的口令</li>
</ul>
</li>
<li><p>测试https开启成功</p>
<p>启动tomcat，访问<a href="https://david4it.com:8443" target="_blank" rel="noopener">https://david4it.com:8443</a></p>
<p>一般浏览器会显示该连接不安全，你在浏览器手动将此连接设置为可信任的，然后出现tomcat页面即说明https配置成功</p>
</li>
<li><p>CAS server还需要配置好证书的相关信息，在application.properties对原有默认的配置进行修改</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.ssl.key-store</span>=<span class="string">file:C:/Users/SMESC/Desktop/apache-tomcat-8.5.55/server.keystore</span></span><br><span class="line"><span class="meta">server.ssl.key-store-password</span>=<span class="string">tomcat</span></span><br><span class="line"><span class="meta">server.ssl.key-password</span>=<span class="string">changeit</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<h4 id="CAS-Server数据库配置"><a href="#CAS-Server数据库配置" class="headerlink" title="CAS Server数据库配置"></a>CAS Server数据库配置</h4><p>用户名和密码是使用默认的，而实际开发中往往是需要连接数据库进行数据库查询，现在就需要添加上数据库的连接信息，确保用户信息是从数据库读取到的。</p>
<ul>
<li><p>在cas-overlay-template项目的pom.xml文件中添加jdbc数据库连接相关依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.apereo.cas&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;cas-server-support-jdbc&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;cas.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.apereo.cas&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;cas-server-support-jdbc-drivers&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;cas.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line"> &lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>准备好数据结构的sql</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 创建数据库表空间</span><br><span class="line">CREATE DATABASE test_cas DEFAULT CHARSET utf8 COLLATE utf8_general_ci;  </span><br><span class="line">USE test_cas;  </span><br><span class="line">-- 创建帐号信息表</span><br><span class="line">DROP TABLE IF EXISTS &#96;cas_user_base&#96;;  </span><br><span class="line">CREATE TABLE &#96;cas_user_base&#96; (  </span><br><span class="line">  &#96;id&#96; INT(11) NOT NULL AUTO_INCREMENT,  </span><br><span class="line">  &#96;user_name&#96; VARCHAR(45) DEFAULT NULL,  </span><br><span class="line">  &#96;user_psd&#96; VARCHAR(100) DEFAULT NULL, </span><br><span class="line">   &#96;expired&#96; INT(1) DEFAULT 0,</span><br><span class="line">  &#96;disabled&#96; INT(1) DEFAULT 0,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)  </span><br><span class="line">);  </span><br><span class="line">-- 插入登录帐号数据 密码是123456</span><br><span class="line">INSERT INTO &#96;cas_user_base&#96; VALUES (1,&#39;admin&#39;,&#39;e10adc3949ba59abbe56e057f20f883e&#39;, 0, 0),(2,&#39;guest&#39;,&#39;e10adc3949ba59abbe56e057f20f883e&#39;, 0, 0);</span><br></pre></td></tr></table></figure>
</li>
<li><p>为了对项目中的配置进行覆盖，新建如下图所示的结构，把cas-overlay-template-5.3\overlays\org.apereo.cas.cas-server-webapp-tomcat-5.3.14\WEB-INF\classes\application.properties配置文件复制一份出来，放到cas-overlay-template-5.3\src\main\resources\目录下，加入jdbc相关的配置，并注释掉原有的认证配置</p>
<p><img src="/images/sso/3.png" alt="avatar"></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment"># CAS Authentication Credentials</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># cas.authn.accept.users=casuser::Mellon</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#数据库查询sql</span></span><br><span class="line"><span class="meta">cas.authn.jdbc.query[0].sql</span>=<span class="string">SELECT * FROM cas_user_base WHERE user_name=?</span></span><br><span class="line"><span class="comment">#数据库连接信息</span></span><br><span class="line"><span class="meta">cas.authn.jdbc.query[0].url</span>=<span class="string">jdbc:mysql://localhost:3306/test_cas?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="meta">cas.authn.jdbc.query[0].dialect</span>=<span class="string">org.hibernate.dialect.MySQLDialect</span></span><br><span class="line"><span class="meta">cas.authn.jdbc.query[0].user</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">cas.authn.jdbc.query[0].password</span>=<span class="string">Passw0rd</span></span><br><span class="line"><span class="meta">cas.authn.jdbc.query[0].driverClass</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="comment">#以user_psd作为密码字段</span></span><br><span class="line"><span class="meta">cas.authn.jdbc.query[0].fieldPassword</span>=<span class="string">user_psd</span></span><br><span class="line"><span class="comment">#指定过期字段 int 类型 1为过期 0 为不过期</span></span><br><span class="line"><span class="meta">cas.authn.jdbc.query[0].fieldExpired</span>=<span class="string">expired</span></span><br><span class="line"><span class="comment">#指定过期字段 int 类型 1为不可用 0为可用</span></span><br><span class="line"><span class="meta">cas.authn.jdbc.query[0].fieldDisabled</span>=<span class="string">disabled</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置加密策略</span></span><br><span class="line"><span class="meta">cas.authn.jdbc.query[0].passwordEncoder.type</span>=<span class="string">DEFAULT</span></span><br><span class="line"><span class="meta">cas.authn.jdbc.query[0].passwordEncoder.characterEncoding</span>=<span class="string">UTF-8</span></span><br><span class="line"><span class="meta">cas.authn.jdbc.query[0].passwordEncoder.encodingAlgorithm</span>=<span class="string">MD5</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动项目进行测试，发现输入admin/123456后可以直接登录，证明我们的配置已经生效了。</p>
</li>
</ul>
<h4 id="CAS登录页面自定义"><a href="#CAS登录页面自定义" class="headerlink" title="CAS登录页面自定义"></a>CAS登录页面自定义</h4><p>经过上述的改动之后，一个基本的CAS server就已经实现了，现在需要对界面做一些定制化的修改，以达到我们想要的展示效果。</p>
<p><img src="/images/sso/4.png" alt="avatar"></p>
<p>页面的修改是完全基于现有页面基础上进行的，需要修改的页面按照原项目的路径复制一份出来进行修改，从而达到覆盖的目的，当然也可以完全自定义页面。</p>
<h4 id="密码安全性提升"><a href="#密码安全性提升" class="headerlink" title="密码安全性提升"></a>密码安全性提升</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置加密策略</span></span><br><span class="line"><span class="meta">cas.authn.jdbc.query[0].passwordEncoder.type</span>=<span class="string">DEFAULT</span></span><br><span class="line"><span class="meta">cas.authn.jdbc.query[0].passwordEncoder.characterEncoding</span>=<span class="string">UTF-8</span></span><br><span class="line"><span class="meta">cas.authn.jdbc.query[0].passwordEncoder.encodingAlgorithm</span>=<span class="string">MD5</span></span><br></pre></td></tr></table></figure>

<p>QueryJdbcAuthenticationProperties中有一个加密的对象PasswordEncoderProperties，主要支持如下几种加密方式：</p>
<ul>
<li><strong>NONE</strong> 不加密(默认的)</li>
<li><strong>DEFAULT</strong> 使用encodingAlgorithm来定义加密方式（MD5,SHA）</li>
<li><strong>STANDARD</strong> 标准加密，使用1024的SHA-256散列迭代和随机8字节随机盐值进行加密。</li>
<li><strong>BCRYPT</strong> 使用BCryptPasswordEncoder方法加密</li>
<li><strong>SCRYPT</strong> 使用SCryptPasswordEncoder方法加密</li>
<li><strong>PBKDF2</strong> 使用Pbkdf2PasswordEncoder方法加密</li>
</ul>
<p>最开始使用的<strong>DEFAULT</strong>，使用的是MD5，而且并未做加盐的处理，是可以进行破解的，感兴趣的话，可以在<a href="https://www.somd5.com/" target="_blank" rel="noopener">这里</a>进行尝试，将e10adc3949ba59abbe56e057f20f883e输入进行解密，可以看到返回的结果是123456</p>
<p>现在将加密现在更新为<strong>BCRYPT</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#更新加密策略，使用BCRYPT，增强安全性</span></span><br><span class="line"><span class="meta">cas.authn.jdbc.query[0].passwordEncoder.type</span>=<span class="string">BCRYPT</span></span><br><span class="line"><span class="meta">cas.authn.jdbc.query[0].passwordEncoder.characterEncoding</span>=<span class="string">UTF-8</span></span><br></pre></td></tr></table></figure>

<p>变更加密策略之后还需要更新数据中的密码的字符串，可以通过new BCryptPasswordEncoder().encode(“123456”)得到对应的加密结果</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> cas_user_base <span class="keyword">SET</span> user_psd = <span class="string">'$2a$10$8GhWjgG4j2Ot15inivAAW.bmzAeu.If9J8HEV6j/jbI37.8GLwS2W'</span></span><br></pre></td></tr></table></figure>

<p>通过实现org.springframework.security.crypto.password.PasswordEncoder扩展加密算法，此时需要配置cas.authn.jdbc.query[0].passwordEncoder.type=你实现类的全限定名。</p>
<p>本文涉及的src以及pom.xml文件已经放到<a href="https://github.com/david4It/cus_cas_server" target="_blank" rel="noopener">github</a></p>
]]></content>
      <categories>
        <category>CAS</category>
      </categories>
      <tags>
        <tag>CAS</tag>
      </tags>
  </entry>
</search>
